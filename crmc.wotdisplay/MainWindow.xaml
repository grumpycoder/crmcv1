<Window
		xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
		xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
		xmlns:properties="clr-namespace:crmc.wotdisplay.Properties"
		x:Class="crmc.wotdisplay.MainWindow"
		Title="MainWindow" x:Name="mainWindow" SizeToContent="WidthAndHeight" WindowStartupLocation="CenterScreen" WindowState="Maximized" WindowStyle="None">

    <Window.Resources>
        <ResourceDictionary>
            <Style x:Key="ButtonFocusVisual">
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="MetroButton" TargetType="{x:Type Button}">
                <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
                <Setter Property="Background" Value="#EEEEEEEE"/>
                <Setter Property="Foreground" Value="Black"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="Padding" Value="10 5"/>
                <Setter Property="FontSize" Value="14" />
                <Setter Property="BorderThickness" Value="2" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Grid>
                                <Border
									x:Name="Border"
									Background="{TemplateBinding Background}"
									BorderBrush="{TemplateBinding BorderBrush}"
									BorderThickness="{TemplateBinding BorderThickness}" />

                                <ContentPresenter
									HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
									Margin="{TemplateBinding Padding}"
									VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
									RecognizesAccessKey="True" />
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter Property="OpacityMask" Value="#AA888888"/>
                                    <Setter Property="Margin" Value="2 1" />
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="BorderThickness" Value="0"/>
                                    <!--<Setter Property="Background" Value="DimGray"/>-->
                                    <Setter Property="Foreground" Value="White"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Foreground" Value="#ADADAD"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="SettingTextBlockStyle" TargetType="{x:Type TextBlock}">
                <Setter Property="FontSize" Value="14" />
                <Setter Property="FontFamily" Value="Euphemia" />
                <Setter Property="FontWeight" Value="Bold" />
                <Setter Property="Foreground" Value="White"/>
            </Style>

            <Style x:Key="SettingGroupBoxStyle" TargetType="{x:Type GroupBox}">
                <!--<Setter Property="FontSize" Value="14" />
				<Setter Property="FontFamily" Value="Calibri" />
				<Setter Property="FontWeight" Value="Bold" />-->
                <Setter Property="Foreground" Value="White"/>
                <Setter Property="Margin" Value="3"/>
            </Style>

            <SolidColorBrush x:Key="Expander.MouseOver.Circle.Stroke" Color="#FF5593FF"/>
            <SolidColorBrush x:Key="Expander.MouseOver.Circle.Fill" Color="#FFF3F9FF"/>
            <SolidColorBrush x:Key="Expander.MouseOver.Arrow.Stroke" Color="#FF000000"/>
            <SolidColorBrush x:Key="Expander.Pressed.Circle.Stroke" Color="#FF3C77DD"/>
            <SolidColorBrush x:Key="Expander.Pressed.Circle.Fill" Color="#FFD9ECFF"/>
            <SolidColorBrush x:Key="Expander.Pressed.Arrow.Stroke" Color="#FF000000"/>
            <SolidColorBrush x:Key="Expander.Disabled.Circle.Stroke" Color="#FFBCBCBC"/>
            <SolidColorBrush x:Key="Expander.Disabled.Circle.Fill" Color="#FFE6E6E6"/>
            <SolidColorBrush x:Key="Expander.Disabled.Arrow.Stroke" Color="#FF707070"/>
            <SolidColorBrush x:Key="Expander.Static.Circle.Fill" Color="Black"/>
            <SolidColorBrush x:Key="Expander.Static.Circle.Stroke" Color="Black"/>
            <SolidColorBrush x:Key="Expander.Static.Arrow.Stroke" Color="Black"/>

            <Style x:Key="ExpanderRightHeaderStyle" TargetType="{x:Type ToggleButton}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Border Padding="{TemplateBinding Padding}">
                                <Grid Background="Transparent" SnapsToDevicePixels="False">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="19"/>
                                        <RowDefinition Height="*"/>
                                    </Grid.RowDefinitions>
                                    <Grid>
                                        <Grid.LayoutTransform>
                                            <TransformGroup>
                                                <TransformGroup.Children>
                                                    <TransformCollection>
                                                        <RotateTransform Angle="-90"/>
                                                    </TransformCollection>
                                                </TransformGroup.Children>
                                            </TransformGroup>
                                        </Grid.LayoutTransform>
                                        <Ellipse x:Name="circle" Fill="{StaticResource Expander.Static.Circle.Fill}" HorizontalAlignment="Center" Height="19" Stroke="{StaticResource Expander.Static.Circle.Stroke}" VerticalAlignment="Center" Width="19"/>
                                        <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="{StaticResource Expander.Static.Arrow.Stroke}" StrokeThickness="2" VerticalAlignment="Center"/>
                                    </Grid>
                                    <ContentPresenter HorizontalAlignment="Center" Margin="0,4,0,0" Grid.Row="1" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Top"/>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="true">
                                    <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Stroke}"/>
                                    <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Fill}"/>
                                    <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.MouseOver.Arrow.Stroke}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Stroke}"/>
                                    <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                                    <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Fill}"/>
                                    <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Pressed.Arrow.Stroke}"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Stroke}"/>
                                    <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Fill}"/>
                                    <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="ExpanderUpHeaderStyle" TargetType="{x:Type ToggleButton}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Border Padding="{TemplateBinding Padding}">
                                <Grid Background="Transparent" SnapsToDevicePixels="False">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="19"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>
                                    <Grid>
                                        <Grid.LayoutTransform>
                                            <TransformGroup>
                                                <TransformGroup.Children>
                                                    <TransformCollection>
                                                        <RotateTransform Angle="180"/>
                                                    </TransformCollection>
                                                </TransformGroup.Children>
                                            </TransformGroup>
                                        </Grid.LayoutTransform>
                                        <Ellipse x:Name="circle" Fill="{StaticResource Expander.Static.Circle.Fill}" HorizontalAlignment="Center" Height="19" Stroke="{StaticResource Expander.Static.Circle.Stroke}" VerticalAlignment="Center" Width="19"/>
                                        <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="{StaticResource Expander.Static.Arrow.Stroke}" StrokeThickness="2" VerticalAlignment="Center"/>
                                    </Grid>
                                    <ContentPresenter Grid.Column="1" HorizontalAlignment="Left" Margin="4,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center"/>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="true">
                                    <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Stroke}"/>
                                    <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Fill}"/>
                                    <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.MouseOver.Arrow.Stroke}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Stroke}"/>
                                    <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                                    <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Fill}"/>
                                    <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Pressed.Arrow.Stroke}"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Stroke}"/>
                                    <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Fill}"/>
                                    <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="ExpanderLeftHeaderStyle" TargetType="{x:Type ToggleButton}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Border Padding="{TemplateBinding Padding}">
                                <Grid Background="Transparent" SnapsToDevicePixels="False">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="19"/>
                                        <RowDefinition Height="*"/>
                                    </Grid.RowDefinitions>
                                    <Grid>
                                        <Grid.LayoutTransform>
                                            <TransformGroup>
                                                <TransformGroup.Children>
                                                    <TransformCollection>
                                                        <RotateTransform Angle="90"/>
                                                    </TransformCollection>
                                                </TransformGroup.Children>
                                            </TransformGroup>
                                        </Grid.LayoutTransform>
                                        <Ellipse x:Name="circle" Fill="{StaticResource Expander.Static.Circle.Fill}" HorizontalAlignment="Center" Height="19" Stroke="{StaticResource Expander.Static.Circle.Stroke}" VerticalAlignment="Center" Width="19"/>
                                        <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="{StaticResource Expander.Static.Arrow.Stroke}" StrokeThickness="2" VerticalAlignment="Center"/>
                                    </Grid>
                                    <ContentPresenter HorizontalAlignment="Center" Margin="0,4,0,0" Grid.Row="1" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Top"/>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="true">
                                    <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Stroke}"/>
                                    <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Fill}"/>
                                    <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.MouseOver.Arrow.Stroke}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Stroke}"/>
                                    <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                                    <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Fill}"/>
                                    <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Pressed.Arrow.Stroke}"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Stroke}"/>
                                    <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Fill}"/>
                                    <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="ExpanderHeaderFocusVisual">
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <Border>
                                <Rectangle Margin="0" SnapsToDevicePixels="true" Stroke="Black" StrokeThickness="1" StrokeDashArray="1 2"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Border Padding="{TemplateBinding Padding}">
                                <Grid Background="Transparent" SnapsToDevicePixels="False">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="19"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>
                                    <Ellipse x:Name="circle" Fill="{StaticResource Expander.Static.Circle.Fill}" HorizontalAlignment="Center" Height="19" Stroke="{StaticResource Expander.Static.Circle.Stroke}" VerticalAlignment="Center" Width="19"/>
                                    <Path Grid.Column="0" x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="{StaticResource Expander.Static.Arrow.Stroke}" StrokeThickness="2" VerticalAlignment="Center"/>
                                    <ContentPresenter Grid.Column="1" HorizontalAlignment="Left" Margin="4,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center"/>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="true">
                                    <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Stroke}"/>
                                    <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Fill}"/>
                                    <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.MouseOver.Arrow.Stroke}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Stroke}"/>
                                    <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                                    <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Fill}"/>
                                    <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Pressed.Arrow.Stroke}"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Stroke}"/>
                                    <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Fill}"/>
                                    <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="ExpanderStyle1" TargetType="{x:Type Expander}">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                <Setter Property="Background" Value="Black"/>
                <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                <Setter Property="VerticalContentAlignment" Value="Stretch"/>
                <Setter Property="BorderBrush" Value="Transparent"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Expander}">
                            <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="3" SnapsToDevicePixels="true">
                                <DockPanel>
                                    <ToggleButton x:Name="HeaderSite" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" Content="{TemplateBinding Header}" DockPanel.Dock="Top" Foreground="{TemplateBinding Foreground}" FontWeight="{TemplateBinding FontWeight}" FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}" FontStyle="{TemplateBinding FontStyle}" FontStretch="{TemplateBinding FontStretch}" FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" MinWidth="0" MinHeight="0" Padding="{TemplateBinding Padding}" Style="{StaticResource ExpanderDownHeaderStyle}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                    <ContentPresenter x:Name="ExpandSite" DockPanel.Dock="Bottom" Focusable="false" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" Visibility="Collapsed" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                </DockPanel>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsExpanded" Value="true">
                                    <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
                                </Trigger>
                                <Trigger Property="ExpandDirection" Value="Right">
                                    <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Right"/>
                                    <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left"/>
                                    <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderRightHeaderStyle}"/>
                                </Trigger>
                                <Trigger Property="ExpandDirection" Value="Up">
                                    <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Top"/>
                                    <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom"/>
                                    <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderUpHeaderStyle}"/>
                                </Trigger>
                                <Trigger Property="ExpandDirection" Value="Left">
                                    <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Left"/>
                                    <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right"/>
                                    <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderLeftHeaderStyle}"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <CollectionViewSource Source="{Binding Source={x:Static Fonts.SystemFontFamilies}}" x:Key="MyFonts"/>
            <properties:Settings x:Key="settings" />
        </ResourceDictionary>

    </Window.Resources>

    <Canvas x:Name="wallCanvas" Background="Black" DockPanel.Dock="Bottom">

        <Expander IsExpanded="False" ExpandDirection="Down" BorderThickness="0" x:Name="expanderSettings" Panel.ZIndex="999" Style="{StaticResource ExpanderStyle1}" 
				  DataContext="{StaticResource settings}">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition/>
                    <RowDefinition/>
                    <RowDefinition/>
                    <RowDefinition/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition/>
                    <ColumnDefinition/>
                    <ColumnDefinition/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>

                <GroupBox Grid.Row="0" Grid.Column="0" Header="Default Min Font Size" Style="{StaticResource SettingGroupBoxStyle}">
                    <StackPanel VerticalAlignment="Center">
                        <Slider x:Name="sldMinFont" Value="{Binding Path=Default.MinFontSize}" TickPlacement="BottomRight" 
								SmallChange="1" Maximum="60" Minimum="1" IsSnapToTickEnabled="True" LargeChange="5">
                        </Slider>
                        <TextBlock x:Name="lblMinFontSize" Text="{Binding Value, ElementName=sldMinFont }" HorizontalAlignment="Center">
                        </TextBlock>
                    </StackPanel>
                </GroupBox>

                <GroupBox Grid.Row="0" Grid.Column="1" Header="Default Max Font Size" Style="{StaticResource SettingGroupBoxStyle}">
                    <StackPanel VerticalAlignment="Center">
                        <Slider x:Name="sldMaxFont" Value="{Binding Path=Default.MaxFontSize}" TickPlacement="BottomRight" SmallChange="1" Maximum="60" IsSnapToTickEnabled="True" Minimum="1" LargeChange="5" >
                        </Slider>
                        <TextBlock x:Name="lblMaxFontSize" Text="{Binding Value, ElementName=sldMaxFont}" HorizontalAlignment="Center"/>
                    </StackPanel>
                </GroupBox>

                <GroupBox Grid.Row="0" Grid.Column="2" Header="Default Min VIP Font Size" Style="{StaticResource SettingGroupBoxStyle}">
                    <StackPanel VerticalAlignment="Center">
                        <Slider x:Name="sldMinFontSizeVIP" Value="{Binding Path=Default.MinFontSizeVIP}" TickPlacement="BottomRight" SmallChange="1" Maximum="60" Minimum="1" IsSnapToTickEnabled="True" LargeChange="5" >
                        </Slider>
                        <TextBlock x:Name="lblMinFontSizeVIP" Text="{Binding Value, ElementName=sldMinFontSizeVIP}" HorizontalAlignment="Center"/>
                    </StackPanel>
                </GroupBox>

                <GroupBox Grid.Row="0" Grid.Column="3" Header="Default Max VIP Font Size" Style="{StaticResource SettingGroupBoxStyle}">
                    <StackPanel VerticalAlignment="Center">
                        <Slider x:Name="sldMaxFontSizeVIP" Value="{Binding Path=Default.MaxFontSizeVIP}" TickPlacement="BottomRight" SmallChange="1" Maximum="60" IsSnapToTickEnabled="True" Minimum="1" LargeChange="5" >
                        </Slider>
                        <TextBlock x:Name="lblMaxFontSizeVIP" Text="{Binding Value, ElementName=sldMaxFontSizeVIP}" HorizontalAlignment="Center"/>
                    </StackPanel>
                </GroupBox>

                <GroupBox Grid.Row="1" Grid.Column="0" Header="How Slow to Scroll" Style="{StaticResource SettingGroupBoxStyle}">
                    <StackPanel>
                        <Slider x:Name="sldScrollSpeed" Value="{Binding Path=Default.ScrollSpeed}" TickPlacement="BottomRight" SmallChange="1" Maximum="120" Minimum="1" TickFrequency="1" LargeChange="5" IsSnapToTickEnabled="True">
                        </Slider>
                        <TextBlock x:Name="lblScrollSpeed" Text="{Binding Value, ElementName=sldScrollSpeed}" HorizontalAlignment="Center"/>
                    </StackPanel>
                </GroupBox>

                <GroupBox Grid.Row="1" Grid.Column="1" Header="Speed to Add New Names" Style="{StaticResource SettingGroupBoxStyle}">
                    <StackPanel VerticalAlignment="Center">
                        <Slider x:Name="sldAddSpeed" Value="{Binding Path=Default.AddNewItemSpeed}" TickPlacement="BottomRight" Maximum="5" Minimum="0.1" IsSnapToTickEnabled="True" TickFrequency="0.1" LargeChange="0.5" >
                        </Slider>
                        <TextBlock x:Name="lblAddSpeed" Text="{Binding Value, ElementName=sldAddSpeed}" HorizontalAlignment="Center"/>
                    </StackPanel>
                </GroupBox>

                <GroupBox Grid.Row="1" Grid.Column="2" Header="Font Family" Style="{StaticResource SettingGroupBoxStyle}">
                    <StackPanel VerticalAlignment="Center">

                        <ComboBox x:Name="cboFontChooser" ItemsSource="{Binding Source={StaticResource MyFonts}}"  
							  SelectedValue="{Binding Path=Default.FontFamily}" SelectedValuePath="Source" VerticalAlignment="Center" >
                            <ComboBox.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <VirtualizingStackPanel />
                                </ItemsPanelTemplate>
                            </ComboBox.ItemsPanel>
                            <ComboBox.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding}" FontFamily="{Binding}" Height="20"/>
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                        </ComboBox>


                    </StackPanel>
                </GroupBox>

                <GroupBox Grid.Row="1" Grid.Column="3" Header="Data Source" Style="{StaticResource SettingGroupBoxStyle}">
                    <StackPanel Orientation="Horizontal" VerticalAlignment="Center">
                        <Label Content="Use Local Data" Foreground="White" VerticalAlignment="Center"></Label>
                        <CheckBox IsChecked="{Binding Path=Default.UseLocalDataSource}" VerticalContentAlignment="Center" Height="20" />
                    </StackPanel>
                </GroupBox>

                <GroupBox Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="2">

                    <StackPanel Background="Black">
                        <MediaElement x:Name="MediaPlayer" MediaEnded="MediaElement_MediaEnded" LoadedBehavior="Manual" />
                        
                        <Label Content="Current Song: "></Label>
                        <TextBlock Foreground="#FFF9F7F7" FontSize="14" Name="CurrentSongTextBlock">Not Playing</TextBlock>
                         <!--To interactively stop, pause, and play the media, the LoadedBehavior property of the MediaElement must be set to "Manual".--> 
                        <!--<MediaElement Name="myMediaElement" LoadedBehavior="Manual" UnloadedBehavior="Stop" MediaEnded="Element_MediaEnded"/>-->

                        <StackPanel HorizontalAlignment="Center" Width="864" Orientation="Horizontal" Margin="0,0,10,0">

                             <!--Play button.--> 
                            <Image Source="images\play.ico" Name="PlayButton" MouseDown="OnMouseDownPlayMedia" Margin="5" Height="40" Width="40" />

                             <!--Stop button.--> 
                            <Image Source="images\stop.ico" MouseDown="OnMouseDownStopMedia" Margin="5" Height="40" Width="40" />

                             <!--Previous button.--> 
                            <Image Source="images\rewind.ico" MouseDown="OnMouseDownBackMedia" Margin="5" Height="40" Width="40" />

                             <!--Next button.--> 
                            <Image Source="images\forward.ico" MouseDown="OnMouseDownForwardMedia" Margin="5" Height="40" Width="40" />

                             <!--Refresh button.--> 
                            <Image Source="images\refresh.ico" MouseDown="OnMouseDownRefreshMedia" Margin="5" Height="40" Width="40" />

                             <!--Volume slider. This slider allows a Volume range between 0 and 1.--> 
                            <TextBlock Foreground="White" VerticalAlignment="Center" Margin="5">Volume</TextBlock>
                            <Slider Name="VolumeSlider" VerticalAlignment="Center" ValueChanged="ChangeMediaVolume" Minimum="0" Maximum="1" Value="{Binding Path=Default.Volume}" Width="96"/>

                        </StackPanel>
                    </StackPanel>


                </GroupBox>

                <WrapPanel Grid.Row="2" Grid.Column="2" Grid.ColumnSpan="2" HorizontalAlignment="Right" VerticalAlignment="Bottom">
                    <Button x:Name="btnResetSettings" Style="{StaticResource MetroButton}" Content="Reset" Margin="3" Click="btnReset_Click" Panel.ZIndex="999" />
                    <Button x:Name="btnSaveSettings" Style="{StaticResource MetroButton}" Content="Save" Margin="3" Click="btnSaveSettings_Click" Panel.ZIndex="999" />
                    <Button x:Name="btnCloseApp" Style="{StaticResource MetroButton}" Content="Close" Margin="3" Click="BtnCloseApp_OnClick" Panel.ZIndex="999" />
                </WrapPanel>

                <TextBlock Grid.Row="3" Grid.Column="0" Grid.ColumnSpan="4" HorizontalAlignment="Right"  Name="connectionStatus" Style="{StaticResource SettingTextBlockStyle}"></TextBlock>
            </Grid>
        </Expander>

        <!--<DockPanel Background="#0000" Name="StatusDockPanel" Dock="Left, Right" Height="300">
            <StackPanel>
            <Button Name="StartButton" Content="Start Display" HorizontalAlignment="Center" VerticalAlignment="Center" FontSize="20" Click="StartButton_OnClick" />
            <TextBlock Name="StatusTextBlock" Text="Some content here"  Foreground="White"/>
            </StackPanel>
        </DockPanel>-->
    </Canvas>

</Window>
